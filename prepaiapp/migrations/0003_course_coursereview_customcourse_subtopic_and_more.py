# Generated by Django 5.2.6 on 2025-09-19 04:49

import datetime
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('prepaiapp', '0002_profile'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=250, unique=True)),
                ('description', models.TextField()),
                ('short_description', models.CharField(help_text='Brief description for cards', max_length=300)),
                ('category', models.CharField(choices=[('programming', 'Programming'), ('data_science', 'Data Science'), ('web_development', 'Web Development'), ('databases', 'Databases'), ('machine_learning', 'Machine Learning'), ('business', 'Business'), ('design', 'Design'), ('other', 'Other')], default='programming', max_length=50)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', max_length=20)),
                ('estimated_hours', models.PositiveIntegerField(help_text='Estimated completion time in hours')),
                ('icon', models.CharField(default='ðŸ“š', help_text='Emoji icon for the course', max_length=10)),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='course_covers/')),
                ('is_active', models.BooleanField(default=True)),
                ('is_premium', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order')),
                ('assistant_id', models.CharField(blank=True, help_text='OpenAI Assistant ID for this course', max_length=100, null=True)),
                ('system_prompt', models.TextField(blank=True, help_text='Base system prompt for the course assistant')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['order', 'title'],
            },
        ),
        migrations.CreateModel(
            name='CourseReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review_text', models.TextField(blank=True)),
                ('content_quality', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('difficulty_appropriate', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('ai_teaching_effectiveness', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='prepaiapp.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_reviews', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CustomCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('uploaded_file', models.FileField(upload_to='custom_courses/')),
                ('original_filename', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('processing', 'Processing'), ('ready', 'Ready'), ('failed', 'Failed')], default='processing', max_length=20)),
                ('processing_error', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('generated_course', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='custom_source', to='prepaiapp.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_courses', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Subtopic',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=250)),
                ('description', models.TextField()),
                ('syllabus_content', models.TextField(help_text='Detailed syllabus/curriculum content for this subtopic that will be fed to OpenAI assistant')),
                ('learning_objectives', models.TextField(help_text='What students will learn after completing this subtopic')),
                ('order', models.PositiveIntegerField(default=0)),
                ('content_type', models.CharField(choices=[('lesson', 'Lesson'), ('practice', 'Practice Exercise'), ('project', 'Project'), ('assessment', 'Assessment')], default='lesson', max_length=20)),
                ('estimated_minutes', models.PositiveIntegerField(default=30, help_text='Estimated time to complete in minutes')),
                ('teaching_prompt', models.TextField(blank=True, help_text='Specific prompt for teaching this subtopic via voice assistant')),
                ('assessment_prompt', models.TextField(blank=True, help_text='Specific prompt for testing knowledge of this subtopic')),
                ('reference_materials', models.TextField(blank=True, help_text='Additional reference materials, links, or resources')),
                ('code_examples', models.TextField(blank=True, help_text='Code examples or snippets relevant to this subtopic')),
                ('is_active', models.BooleanField(default=True)),
                ('is_optional', models.BooleanField(default=False)),
                ('difficulty_rating', models.IntegerField(default=3, help_text='Difficulty rating from 1 (easy) to 5 (very hard)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subtopics', to='prepaiapp.course')),
                ('prerequisites', models.ManyToManyField(blank=True, help_text='Subtopics that must be completed before this one', to='prepaiapp.subtopic')),
            ],
            options={
                'ordering': ['course', 'order', 'title'],
            },
        ),
        migrations.CreateModel(
            name='LearningSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_type', models.CharField(choices=[('learn', 'Learning Session'), ('test', 'Test Session')], max_length=10)),
                ('duration', models.DurationField()),
                ('interactions_count', models.PositiveIntegerField(default=0)),
                ('questions_asked', models.PositiveIntegerField(default=0)),
                ('test_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('questions_correct', models.PositiveIntegerField(blank=True, null=True)),
                ('questions_total', models.PositiveIntegerField(blank=True, null=True)),
                ('session_data', models.JSONField(blank=True, default=dict, help_text='Additional session data like conversation logs')),
                ('started_at', models.DateTimeField()),
                ('ended_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_sessions', to=settings.AUTH_USER_MODEL)),
                ('subtopic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='prepaiapp.subtopic')),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='UserCourseEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('enrolled', 'Enrolled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('paused', 'Paused'), ('dropped', 'Dropped')], default='enrolled', max_length=20)),
                ('progress_percentage', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='prepaiapp.course')),
                ('last_accessed_subtopic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='prepaiapp.subtopic')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_enrollments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserSubtopicProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], default='not_started', max_length=20)),
                ('last_mode', models.CharField(blank=True, choices=[('learn', 'Learn Mode'), ('test', 'Test Mode')], max_length=10, null=True)),
                ('learn_sessions_count', models.PositiveIntegerField(default=0)),
                ('test_attempts_count', models.PositiveIntegerField(default=0)),
                ('best_test_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('average_test_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('total_learning_time', models.DurationField(default=datetime.timedelta)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('subtopic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='prepaiapp.subtopic')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subtopic_progress', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['category', 'difficulty_level'], name='prepaiapp_c_categor_a67dde_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['is_active', 'order'], name='prepaiapp_c_is_acti_384662_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='coursereview',
            unique_together={('user', 'course')},
        ),
        migrations.AddIndex(
            model_name='subtopic',
            index=models.Index(fields=['course', 'order'], name='prepaiapp_s_course__50e7a0_idx'),
        ),
        migrations.AddIndex(
            model_name='subtopic',
            index=models.Index(fields=['course', 'is_active'], name='prepaiapp_s_course__434cd7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='subtopic',
            unique_together={('course', 'slug')},
        ),
        migrations.AddIndex(
            model_name='learningsession',
            index=models.Index(fields=['user', 'session_type'], name='prepaiapp_l_user_id_730c35_idx'),
        ),
        migrations.AddIndex(
            model_name='learningsession',
            index=models.Index(fields=['subtopic', 'session_type'], name='prepaiapp_l_subtopi_f9cfd9_idx'),
        ),
        migrations.AddIndex(
            model_name='learningsession',
            index=models.Index(fields=['started_at'], name='prepaiapp_l_started_6afce7_idx'),
        ),
        migrations.AddIndex(
            model_name='usercourseenrollment',
            index=models.Index(fields=['user', 'status'], name='prepaiapp_u_user_id_0a7163_idx'),
        ),
        migrations.AddIndex(
            model_name='usercourseenrollment',
            index=models.Index(fields=['course', 'status'], name='prepaiapp_u_course__5069e9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usercourseenrollment',
            unique_together={('user', 'course')},
        ),
        migrations.AddIndex(
            model_name='usersubtopicprogress',
            index=models.Index(fields=['user', 'status'], name='prepaiapp_u_user_id_cb9115_idx'),
        ),
        migrations.AddIndex(
            model_name='usersubtopicprogress',
            index=models.Index(fields=['subtopic', 'status'], name='prepaiapp_u_subtopi_6e27c4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usersubtopicprogress',
            unique_together={('user', 'subtopic')},
        ),
    ]
